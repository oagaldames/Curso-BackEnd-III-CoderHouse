paths:
  /api/users/{uid}:
    get:
      summary: Obtener usuario por ID
      description: "Obtiene la información de un usuario específico por su ID."
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: "ID único del usuario"
          schema:
            type: string
            example: "5f7e9f9b5f7e9f9b5f7e9f9b"
      responses:
        200:
          description: "Solicitud exitosa. Devuelve el usuario solicitado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  payload:
                    $ref: "#/components/schemas/Users"
              examples:
                ejemplo:
                  summary: Ejemplo de respuesta exitosa
                  value:
                    status: "success"
                    payload:
                      id: "5f7e9f9b5f7e9f9b5f7e9f9b"
                      name: "Juan Pérez"
                      email: "juan.perez@example.com"
        404:
          description: "Usuario no encontrado."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                ejemploError:
                  summary: Ejemplo de error
                  value:
                    message: "User id 5f7e9f9b5f7e9f9b5f7e9f9b not found"
                    code: 404
        500:
          description: "Error en el servidor al intentar obtener el usuario."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                ejemploError:
                  summary: Ejemplo de error en el servidor
                  value:
                    message: "Internal Server Error"
                    code: 500


